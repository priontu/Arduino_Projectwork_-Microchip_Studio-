
Lab 8.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  00000468  000004fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000468  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800102  00800102  000004fe  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000004fe  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000530  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000030  00000000  00000000  0000056c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000091d  00000000  00000000  0000059c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006d4  00000000  00000000  00000eb9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000004e2  00000000  00000000  0000158d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000098  00000000  00000000  00001a70  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003c2  00000000  00000000  00001b08  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000035e  00000000  00000000  00001eca  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000020  00000000  00000000  00002228  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 d4 01 	jmp	0x3a8	; 0x3a8 <__vector_1>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 23 02 	jmp	0x446	; 0x446 <__vector_11>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e8 e6       	ldi	r30, 0x68	; 104
  7c:	f4 e0       	ldi	r31, 0x04	; 4
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 30       	cpi	r26, 0x02	; 2
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a2 e0       	ldi	r26, 0x02	; 2
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a4 30       	cpi	r26, 0x04	; 4
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
  9e:	0c 94 32 02 	jmp	0x464	; 0x464 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <main>:
int current_led = 1;
int reversed = 0;
int prev_adch = 0;

int main(void){
	cli();
  a6:	f8 94       	cli
	
	DDRD = 0xFF;
  a8:	8f ef       	ldi	r24, 0xFF	; 255
  aa:	8a b9       	out	0x0a, r24	; 10
	DDRB = 0xFF;
  ac:	84 b9       	out	0x04, r24	; 4
	DDRC = 0x00;
  ae:	17 b8       	out	0x07, r1	; 7
	//add your codes
	
	//Enable interrupt
	EIMSK = 0b00000001;
  b0:	81 e0       	ldi	r24, 0x01	; 1
  b2:	8d bb       	out	0x1d, r24	; 29
	EICRA = 0b00000011;
  b4:	83 e0       	ldi	r24, 0x03	; 3
  b6:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__TEXT_REGION_LENGTH__+0x7f8069>
	
	TCCR1A |= (1<<WGM10) | (1<<COM1A1) | (1<<COM1B1);
  ba:	e0 e8       	ldi	r30, 0x80	; 128
  bc:	f0 e0       	ldi	r31, 0x00	; 0
  be:	80 81       	ld	r24, Z
  c0:	81 6a       	ori	r24, 0xA1	; 161
  c2:	80 83       	st	Z, r24
	TCCR1B |= (1<<WGM12) | (1<<CS10);
  c4:	e1 e8       	ldi	r30, 0x81	; 129
  c6:	f0 e0       	ldi	r31, 0x00	; 0
  c8:	80 81       	ld	r24, Z
  ca:	89 60       	ori	r24, 0x09	; 9
  cc:	80 83       	st	Z, r24
	TCCR2A |= (1<<COM2A1) | (1<<WGM21) | (1<<WGM20);
  ce:	e0 eb       	ldi	r30, 0xB0	; 176
  d0:	f0 e0       	ldi	r31, 0x00	; 0
  d2:	80 81       	ld	r24, Z
  d4:	83 68       	ori	r24, 0x83	; 131
  d6:	80 83       	st	Z, r24
	TCCR2B |= (1<<CS20);
  d8:	e1 eb       	ldi	r30, 0xB1	; 177
  da:	f0 e0       	ldi	r31, 0x00	; 0
  dc:	80 81       	ld	r24, Z
  de:	81 60       	ori	r24, 0x01	; 1
  e0:	80 83       	st	Z, r24

	// Select ADC0 as ADC input
	ADMUX = 0b00000000;
  e2:	ec e7       	ldi	r30, 0x7C	; 124
  e4:	f0 e0       	ldi	r31, 0x00	; 0
  e6:	10 82       	st	Z, r1
	// Use AVCC as reference with external capacitor
	ADMUX |= (0<<REFS1)|(1<<REFS0);
  e8:	80 81       	ld	r24, Z
  ea:	80 64       	ori	r24, 0x40	; 64
  ec:	80 83       	st	Z, r24
	// Configure ADC to be left justified
	ADMUX |= (1<<ADLAR);
  ee:	80 81       	ld	r24, Z
  f0:	80 62       	ori	r24, 0x20	; 32
  f2:	80 83       	st	Z, r24
	// Enable the ADC and set the prescaler to max value (128)
	ADCSRA = 0b10000111;
  f4:	87 e8       	ldi	r24, 0x87	; 135
  f6:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>

	sei();
  fa:	78 94       	sei
	
	while(1){
		
		// Start an ADC conversion by setting ADSC bit (bit 6)
		ADCSRA = ADCSRA | (1 << ADSC);
  fc:	ea e7       	ldi	r30, 0x7A	; 122
  fe:	f0 e0       	ldi	r31, 0x00	; 0
 100:	80 81       	ld	r24, Z
 102:	80 64       	ori	r24, 0x40	; 64
 104:	80 83       	st	Z, r24
		
		// Wait until the ADSC bit has been cleared
		while(ADCSRA & (1 << ADSC));
 106:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
 10a:	86 fd       	sbrc	r24, 6
 10c:	fc cf       	rjmp	.-8      	; 0x106 <main+0x60>
		
		if(ADCH <= TRIGPOINT)
 10e:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 112:	81 38       	cpi	r24, 0x81	; 129
 114:	08 f0       	brcs	.+2      	; 0x118 <main+0x72>
 116:	a1 c0       	rjmp	.+322    	; 0x25a <main+0x1b4>
		{
			// Original Sequence Order
			
			if(current_led == 1){
 118:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 11c:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 120:	81 30       	cpi	r24, 0x01	; 1
 122:	91 05       	cpc	r25, r1
 124:	91 f5       	brne	.+100    	; 0x18a <main+0xe4>
				// LED 1
				OCR1A = inc;
 126:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
 12a:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__data_end+0x1>
 12e:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 132:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
				OCR1B = 0;
 136:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
 13a:	10 92 8a 00 	sts	0x008A, r1	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
				OCR2A = 0;
 13e:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 142:	2f ef       	ldi	r18, 0xFF	; 255
 144:	89 ef       	ldi	r24, 0xF9	; 249
 146:	90 e0       	ldi	r25, 0x00	; 0
 148:	21 50       	subi	r18, 0x01	; 1
 14a:	80 40       	sbci	r24, 0x00	; 0
 14c:	90 40       	sbci	r25, 0x00	; 0
 14e:	e1 f7       	brne	.-8      	; 0x148 <main+0xa2>
 150:	00 c0       	rjmp	.+0      	; 0x152 <main+0xac>
 152:	00 00       	nop
				_delay_ms(20);
				inc += 1;
 154:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
 158:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__data_end+0x1>
 15c:	01 96       	adiw	r24, 0x01	; 1
 15e:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__data_end+0x1>
 162:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
				
				if(inc >= 255){
 166:	8f 3f       	cpi	r24, 0xFF	; 255
 168:	91 05       	cpc	r25, r1
 16a:	44 f2       	brlt	.-112    	; 0xfc <main+0x56>
					inc = 0;
 16c:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <__data_end+0x1>
 170:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <__data_end>
					OCR1A = 0;
 174:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 178:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
					current_led = 2;
 17c:	82 e0       	ldi	r24, 0x02	; 2
 17e:	90 e0       	ldi	r25, 0x00	; 0
 180:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 184:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 188:	b9 cf       	rjmp	.-142    	; 0xfc <main+0x56>
				}
				}else if(current_led == 2){
 18a:	82 30       	cpi	r24, 0x02	; 2
 18c:	91 05       	cpc	r25, r1
 18e:	99 f5       	brne	.+102    	; 0x1f6 <main+0x150>
				// LED 2
				OCR1A = 0;
 190:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 194:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
				OCR1B = inc;
 198:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
 19c:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__data_end+0x1>
 1a0:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
 1a4:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
				OCR2A = 0;
 1a8:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
 1ac:	2f ef       	ldi	r18, 0xFF	; 255
 1ae:	89 ef       	ldi	r24, 0xF9	; 249
 1b0:	90 e0       	ldi	r25, 0x00	; 0
 1b2:	21 50       	subi	r18, 0x01	; 1
 1b4:	80 40       	sbci	r24, 0x00	; 0
 1b6:	90 40       	sbci	r25, 0x00	; 0
 1b8:	e1 f7       	brne	.-8      	; 0x1b2 <main+0x10c>
 1ba:	00 c0       	rjmp	.+0      	; 0x1bc <main+0x116>
 1bc:	00 00       	nop
				_delay_ms(20);
				inc += 1;
 1be:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
 1c2:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__data_end+0x1>
 1c6:	01 96       	adiw	r24, 0x01	; 1
 1c8:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__data_end+0x1>
 1cc:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
				
				if(inc >= 255){
 1d0:	8f 3f       	cpi	r24, 0xFF	; 255
 1d2:	91 05       	cpc	r25, r1
 1d4:	0c f4       	brge	.+2      	; 0x1d8 <main+0x132>
 1d6:	92 cf       	rjmp	.-220    	; 0xfc <main+0x56>
					inc = 0;
 1d8:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <__data_end+0x1>
 1dc:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <__data_end>
					OCR1B = 0;
 1e0:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
 1e4:	10 92 8a 00 	sts	0x008A, r1	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
					current_led = 3;
 1e8:	83 e0       	ldi	r24, 0x03	; 3
 1ea:	90 e0       	ldi	r25, 0x00	; 0
 1ec:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 1f0:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 1f4:	83 cf       	rjmp	.-250    	; 0xfc <main+0x56>
				}
				}else if(current_led == 3){
 1f6:	03 97       	sbiw	r24, 0x03	; 3
 1f8:	09 f0       	breq	.+2      	; 0x1fc <main+0x156>
 1fa:	80 cf       	rjmp	.-256    	; 0xfc <main+0x56>
				// LED 3
				OCR1A = 0;
 1fc:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 200:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
				OCR1B = 0;
 204:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
 208:	10 92 8a 00 	sts	0x008A, r1	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
				OCR2A = inc;
 20c:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
 210:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
 214:	2f ef       	ldi	r18, 0xFF	; 255
 216:	89 ef       	ldi	r24, 0xF9	; 249
 218:	90 e0       	ldi	r25, 0x00	; 0
 21a:	21 50       	subi	r18, 0x01	; 1
 21c:	80 40       	sbci	r24, 0x00	; 0
 21e:	90 40       	sbci	r25, 0x00	; 0
 220:	e1 f7       	brne	.-8      	; 0x21a <main+0x174>
 222:	00 c0       	rjmp	.+0      	; 0x224 <main+0x17e>
 224:	00 00       	nop
				_delay_ms(20);
				inc += 1;
 226:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
 22a:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__data_end+0x1>
 22e:	01 96       	adiw	r24, 0x01	; 1
 230:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__data_end+0x1>
 234:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
				
				if(inc >= 255){
 238:	8f 3f       	cpi	r24, 0xFF	; 255
 23a:	91 05       	cpc	r25, r1
 23c:	0c f4       	brge	.+2      	; 0x240 <main+0x19a>
 23e:	5e cf       	rjmp	.-324    	; 0xfc <main+0x56>
					inc = 0;
 240:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <__data_end+0x1>
 244:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <__data_end>
					OCR2A = 0;
 248:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
					current_led = 1;
 24c:	81 e0       	ldi	r24, 0x01	; 1
 24e:	90 e0       	ldi	r25, 0x00	; 0
 250:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 254:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 258:	51 cf       	rjmp	.-350    	; 0xfc <main+0x56>
				}
			}
		}
		else if(ADCH > TRIGPOINT){
 25a:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 25e:	81 38       	cpi	r24, 0x81	; 129
 260:	08 f4       	brcc	.+2      	; 0x264 <main+0x1be>
 262:	4c cf       	rjmp	.-360    	; 0xfc <main+0x56>
			// Reverse Sequence Order
			if(current_led == 1){
 264:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 268:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 26c:	81 30       	cpi	r24, 0x01	; 1
 26e:	91 05       	cpc	r25, r1
 270:	79 f5       	brne	.+94     	; 0x2d0 <main+0x22a>
				// LED 1
				OCR1A = 0;
 272:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 276:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
				OCR1B = 0;
 27a:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
 27e:	10 92 8a 00 	sts	0x008A, r1	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
				OCR2A = inc;
 282:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
 286:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
 28a:	2f ef       	ldi	r18, 0xFF	; 255
 28c:	89 ef       	ldi	r24, 0xF9	; 249
 28e:	90 e0       	ldi	r25, 0x00	; 0
 290:	21 50       	subi	r18, 0x01	; 1
 292:	80 40       	sbci	r24, 0x00	; 0
 294:	90 40       	sbci	r25, 0x00	; 0
 296:	e1 f7       	brne	.-8      	; 0x290 <main+0x1ea>
 298:	00 c0       	rjmp	.+0      	; 0x29a <main+0x1f4>
 29a:	00 00       	nop
				_delay_ms(20);
				inc += 1;
 29c:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
 2a0:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__data_end+0x1>
 2a4:	01 96       	adiw	r24, 0x01	; 1
 2a6:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__data_end+0x1>
 2aa:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
				
				if(inc >= 255){
 2ae:	8f 3f       	cpi	r24, 0xFF	; 255
 2b0:	91 05       	cpc	r25, r1
 2b2:	0c f4       	brge	.+2      	; 0x2b6 <main+0x210>
 2b4:	23 cf       	rjmp	.-442    	; 0xfc <main+0x56>
					inc = 0;
 2b6:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <__data_end+0x1>
 2ba:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <__data_end>
					OCR2A = 0;
 2be:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
					current_led = 2;
 2c2:	82 e0       	ldi	r24, 0x02	; 2
 2c4:	90 e0       	ldi	r25, 0x00	; 0
 2c6:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 2ca:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 2ce:	16 cf       	rjmp	.-468    	; 0xfc <main+0x56>
				}
				}else if(current_led == 2){
 2d0:	82 30       	cpi	r24, 0x02	; 2
 2d2:	91 05       	cpc	r25, r1
 2d4:	99 f5       	brne	.+102    	; 0x33c <main+0x296>
				// LED 2
				OCR1A = 0;
 2d6:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 2da:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
				OCR1B = inc;
 2de:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
 2e2:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__data_end+0x1>
 2e6:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
 2ea:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
				OCR2A = 0;
 2ee:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
 2f2:	2f ef       	ldi	r18, 0xFF	; 255
 2f4:	89 ef       	ldi	r24, 0xF9	; 249
 2f6:	90 e0       	ldi	r25, 0x00	; 0
 2f8:	21 50       	subi	r18, 0x01	; 1
 2fa:	80 40       	sbci	r24, 0x00	; 0
 2fc:	90 40       	sbci	r25, 0x00	; 0
 2fe:	e1 f7       	brne	.-8      	; 0x2f8 <main+0x252>
 300:	00 c0       	rjmp	.+0      	; 0x302 <main+0x25c>
 302:	00 00       	nop
				_delay_ms(20);
				inc += 1;
 304:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
 308:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__data_end+0x1>
 30c:	01 96       	adiw	r24, 0x01	; 1
 30e:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__data_end+0x1>
 312:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
				
				if(inc >= 255){
 316:	8f 3f       	cpi	r24, 0xFF	; 255
 318:	91 05       	cpc	r25, r1
 31a:	0c f4       	brge	.+2      	; 0x31e <main+0x278>
 31c:	ef ce       	rjmp	.-546    	; 0xfc <main+0x56>
					inc = 0;
 31e:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <__data_end+0x1>
 322:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <__data_end>
					OCR1B = 0;
 326:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
 32a:	10 92 8a 00 	sts	0x008A, r1	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
					current_led = 3;
 32e:	83 e0       	ldi	r24, 0x03	; 3
 330:	90 e0       	ldi	r25, 0x00	; 0
 332:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 336:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 33a:	e0 ce       	rjmp	.-576    	; 0xfc <main+0x56>
				}
				}else if(current_led == 3){
 33c:	03 97       	sbiw	r24, 0x03	; 3
 33e:	09 f0       	breq	.+2      	; 0x342 <main+0x29c>
 340:	dd ce       	rjmp	.-582    	; 0xfc <main+0x56>
				// LED 3
				OCR1A = inc;
 342:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
 346:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__data_end+0x1>
 34a:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 34e:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
				OCR1B = 0;
 352:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
 356:	10 92 8a 00 	sts	0x008A, r1	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
				OCR2A = 0;
 35a:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
 35e:	2f ef       	ldi	r18, 0xFF	; 255
 360:	89 ef       	ldi	r24, 0xF9	; 249
 362:	90 e0       	ldi	r25, 0x00	; 0
 364:	21 50       	subi	r18, 0x01	; 1
 366:	80 40       	sbci	r24, 0x00	; 0
 368:	90 40       	sbci	r25, 0x00	; 0
 36a:	e1 f7       	brne	.-8      	; 0x364 <main+0x2be>
 36c:	00 c0       	rjmp	.+0      	; 0x36e <main+0x2c8>
 36e:	00 00       	nop
				_delay_ms(20);
				inc += 1;
 370:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
 374:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__data_end+0x1>
 378:	01 96       	adiw	r24, 0x01	; 1
 37a:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__data_end+0x1>
 37e:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
				
				if(inc >= 255){
 382:	8f 3f       	cpi	r24, 0xFF	; 255
 384:	91 05       	cpc	r25, r1
 386:	0c f4       	brge	.+2      	; 0x38a <main+0x2e4>
 388:	b9 ce       	rjmp	.-654    	; 0xfc <main+0x56>
					inc = 0;
 38a:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <__data_end+0x1>
 38e:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <__data_end>
					OCR1A = 0;
 392:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 396:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
					current_led = 1;
 39a:	81 e0       	ldi	r24, 0x01	; 1
 39c:	90 e0       	ldi	r25, 0x00	; 0
 39e:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 3a2:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 3a6:	aa ce       	rjmp	.-684    	; 0xfc <main+0x56>

000003a8 <__vector_1>:
		
	}
}

//The interrupt service routine are written inside
ISR(INT0_vect){
 3a8:	1f 92       	push	r1
 3aa:	0f 92       	push	r0
 3ac:	0f b6       	in	r0, 0x3f	; 63
 3ae:	0f 92       	push	r0
 3b0:	11 24       	eor	r1, r1
 3b2:	2f 93       	push	r18
 3b4:	3f 93       	push	r19
 3b6:	4f 93       	push	r20
 3b8:	8f 93       	push	r24
 3ba:	9f 93       	push	r25
 3bc:	af 93       	push	r26
 3be:	bf 93       	push	r27
 3c0:	cf 93       	push	r28
 3c2:	df 93       	push	r29
 3c4:	ef 93       	push	r30
 3c6:	ff 93       	push	r31
	cli();
 3c8:	f8 94       	cli
	
	//your interrupt service routine
	int i=0;
	for(i=0;i<2;i++){
 3ca:	80 e0       	ldi	r24, 0x00	; 0
 3cc:	90 e0       	ldi	r25, 0x00	; 0
 3ce:	28 c0       	rjmp	.+80     	; 0x420 <__EEPROM_REGION_LENGTH__+0x20>
		OCR1A = 0xFF;
 3d0:	c8 e8       	ldi	r28, 0x88	; 136
 3d2:	d0 e0       	ldi	r29, 0x00	; 0
 3d4:	2f ef       	ldi	r18, 0xFF	; 255
 3d6:	30 e0       	ldi	r19, 0x00	; 0
 3d8:	39 83       	std	Y+1, r19	; 0x01
 3da:	28 83       	st	Y, r18
		OCR1B = 0xFF;
 3dc:	aa e8       	ldi	r26, 0x8A	; 138
 3de:	b0 e0       	ldi	r27, 0x00	; 0
 3e0:	11 96       	adiw	r26, 0x01	; 1
 3e2:	3c 93       	st	X, r19
 3e4:	2e 93       	st	-X, r18
		OCR2A = 0xFF;
 3e6:	e3 eb       	ldi	r30, 0xB3	; 179
 3e8:	f0 e0       	ldi	r31, 0x00	; 0
 3ea:	2f ef       	ldi	r18, 0xFF	; 255
 3ec:	20 83       	st	Z, r18
 3ee:	2f ef       	ldi	r18, 0xFF	; 255
 3f0:	33 ec       	ldi	r19, 0xC3	; 195
 3f2:	49 e0       	ldi	r20, 0x09	; 9
 3f4:	21 50       	subi	r18, 0x01	; 1
 3f6:	30 40       	sbci	r19, 0x00	; 0
 3f8:	40 40       	sbci	r20, 0x00	; 0
 3fa:	e1 f7       	brne	.-8      	; 0x3f4 <__vector_1+0x4c>
 3fc:	00 c0       	rjmp	.+0      	; 0x3fe <__vector_1+0x56>
 3fe:	00 00       	nop
		_delay_ms(200);
		OCR1A = 0;
 400:	19 82       	std	Y+1, r1	; 0x01
 402:	18 82       	st	Y, r1
		OCR1B = 0;
 404:	11 96       	adiw	r26, 0x01	; 1
 406:	1c 92       	st	X, r1
 408:	1e 92       	st	-X, r1
		OCR2A = 0;
 40a:	10 82       	st	Z, r1
 40c:	2f ef       	ldi	r18, 0xFF	; 255
 40e:	33 ec       	ldi	r19, 0xC3	; 195
 410:	49 e0       	ldi	r20, 0x09	; 9
 412:	21 50       	subi	r18, 0x01	; 1
 414:	30 40       	sbci	r19, 0x00	; 0
 416:	40 40       	sbci	r20, 0x00	; 0
 418:	e1 f7       	brne	.-8      	; 0x412 <__EEPROM_REGION_LENGTH__+0x12>
 41a:	00 c0       	rjmp	.+0      	; 0x41c <__EEPROM_REGION_LENGTH__+0x1c>
 41c:	00 00       	nop
ISR(INT0_vect){
	cli();
	
	//your interrupt service routine
	int i=0;
	for(i=0;i<2;i++){
 41e:	01 96       	adiw	r24, 0x01	; 1
 420:	82 30       	cpi	r24, 0x02	; 2
 422:	91 05       	cpc	r25, r1
 424:	ac f2       	brlt	.-86     	; 0x3d0 <__vector_1+0x28>
		OCR1A = 0;
		OCR1B = 0;
		OCR2A = 0;
		_delay_ms(200);
	}
}
 426:	ff 91       	pop	r31
 428:	ef 91       	pop	r30
 42a:	df 91       	pop	r29
 42c:	cf 91       	pop	r28
 42e:	bf 91       	pop	r27
 430:	af 91       	pop	r26
 432:	9f 91       	pop	r25
 434:	8f 91       	pop	r24
 436:	4f 91       	pop	r20
 438:	3f 91       	pop	r19
 43a:	2f 91       	pop	r18
 43c:	0f 90       	pop	r0
 43e:	0f be       	out	0x3f, r0	; 63
 440:	0f 90       	pop	r0
 442:	1f 90       	pop	r1
 444:	18 95       	reti

00000446 <__vector_11>:

ISR(TIMER1_COMPA_vect){
 446:	1f 92       	push	r1
 448:	0f 92       	push	r0
 44a:	0f b6       	in	r0, 0x3f	; 63
 44c:	0f 92       	push	r0
 44e:	11 24       	eor	r1, r1
 450:	8f 93       	push	r24
	PORTB ^= 0xFF;
 452:	85 b1       	in	r24, 0x05	; 5
 454:	80 95       	com	r24
 456:	85 b9       	out	0x05, r24	; 5
}
 458:	8f 91       	pop	r24
 45a:	0f 90       	pop	r0
 45c:	0f be       	out	0x3f, r0	; 63
 45e:	0f 90       	pop	r0
 460:	1f 90       	pop	r1
 462:	18 95       	reti

00000464 <_exit>:
 464:	f8 94       	cli

00000466 <__stop_program>:
 466:	ff cf       	rjmp	.-2      	; 0x466 <__stop_program>
