
GccApplication9.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000003a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000330  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800100  00800100  000003a4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003a4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000003d4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  00000410  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000008ed  00000000  00000000  00000438  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006ab  00000000  00000000  00000d25  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000490  00000000  00000000  000013d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000078  00000000  00000000  00001860  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003bd  00000000  00000000  000018d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000322  00000000  00000000  00001c95  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  00001fb7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 48 01 	jmp	0x290	; 0x290 <__vector_1>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a4 30       	cpi	r26, 0x04	; 4
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 48 00 	call	0x90	; 0x90 <main>
  88:	0c 94 96 01 	jmp	0x32c	; 0x32c <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <main>:
int threshold, counter;


int main(void)
{
    	DDRB = 0xff;
  90:	8f ef       	ldi	r24, 0xFF	; 255
  92:	84 b9       	out	0x04, r24	; 4
    	DDRD = 0x00;
  94:	1a b8       	out	0x0a, r1	; 10
		

		EICRA = (1 << ISC00) | (1 < ISC01);
  96:	81 e0       	ldi	r24, 0x01	; 1
  98:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__TEXT_REGION_LENGTH__+0x7f8069>
		EIMSK = (1 << INT0);
  9c:	8d bb       	out	0x1d, r24	; 29
    	sei();
  9e:	78 94       	sei
		
    	TCNT1 = 0b00000000;
  a0:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
  a4:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
    	TCCR1B = (1 << WGM12) | (1 << CS10);
  a8:	99 e0       	ldi	r25, 0x09	; 9
  aa:	90 93 81 00 	sts	0x0081, r25	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
    	TCCR1A = (1 << COM1A1) | (1 << COM1B1) | (1 << WGM10);
  ae:	91 ea       	ldi	r25, 0xA1	; 161
  b0:	90 93 80 00 	sts	0x0080, r25	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
    	TCCR2B = (1 << CS20);
  b4:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f80b1>
    	TCCR2A = (1 << COM2A1) | (1 << WGM21) | (1 << WGM20);
  b8:	83 e8       	ldi	r24, 0x83	; 131
  ba:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
				
    	ADMUX = (1 << REFS0) | (1 << ADLAR);
  be:	80 e6       	ldi	r24, 0x60	; 96
  c0:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
    	ADCSRA = (1 << ADEN) | (1 << ADPS0) | (1 << ADPS1) | (1 << ADPS2);
  c4:	87 e8       	ldi	r24, 0x87	; 135
  c6:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
		
		
while(1){
	ADCSRA |= (1 << ADSC);
  ca:	ea e7       	ldi	r30, 0x7A	; 122
  cc:	f0 e0       	ldi	r31, 0x00	; 0
  ce:	80 81       	ld	r24, Z
  d0:	80 64       	ori	r24, 0x40	; 64
  d2:	80 83       	st	Z, r24
	while(ADCSRA & (1 << ADSC));
  d4:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
  d8:	86 fd       	sbrc	r24, 6
  da:	fc cf       	rjmp	.-8      	; 0xd4 <main+0x44>
	threshold = ADCH;
  dc:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
  e0:	90 e0       	ldi	r25, 0x00	; 0
  e2:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
  e6:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	if (threshold > 128){
  ea:	81 38       	cpi	r24, 0x81	; 129
  ec:	91 05       	cpc	r25, r1
  ee:	0c f4       	brge	.+2      	; 0xf2 <main+0x62>
  f0:	66 c0       	rjmp	.+204    	; 0x1be <main+0x12e>
		for(counter=0; counter<0xff; counter++) 
  f2:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <counter+0x1>
  f6:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <counter>
  fa:	13 c0       	rjmp	.+38     	; 0x122 <main+0x92>
		{
			OCR1A = counter;    
  fc:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 100:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 104:	8f e5       	ldi	r24, 0x5F	; 95
 106:	9d e6       	ldi	r25, 0x6D	; 109
 108:	01 97       	sbiw	r24, 0x01	; 1
 10a:	f1 f7       	brne	.-4      	; 0x108 <main+0x78>
 10c:	00 c0       	rjmp	.+0      	; 0x10e <main+0x7e>
 10e:	00 00       	nop
while(1){
	ADCSRA |= (1 << ADSC);
	while(ADCSRA & (1 << ADSC));
	threshold = ADCH;
	if (threshold > 128){
		for(counter=0; counter<0xff; counter++) 
 110:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <counter>
 114:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <counter+0x1>
 118:	01 96       	adiw	r24, 0x01	; 1
 11a:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <counter+0x1>
 11e:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <counter>
 122:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <counter>
 126:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <counter+0x1>
 12a:	8f 3f       	cpi	r24, 0xFF	; 255
 12c:	91 05       	cpc	r25, r1
 12e:	34 f3       	brlt	.-52     	; 0xfc <main+0x6c>
		{
			OCR1A = counter;    
			_delay_ms(7);		
		}
		OCR1A = 0;
 130:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 134:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
		for(counter=0; counter<0xff; counter++) 
 138:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <counter+0x1>
 13c:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <counter>
 140:	13 c0       	rjmp	.+38     	; 0x168 <main+0xd8>
		{
			OCR1B = counter;  
 142:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
 146:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
 14a:	8f e5       	ldi	r24, 0x5F	; 95
 14c:	9d e6       	ldi	r25, 0x6D	; 109
 14e:	01 97       	sbiw	r24, 0x01	; 1
 150:	f1 f7       	brne	.-4      	; 0x14e <main+0xbe>
 152:	00 c0       	rjmp	.+0      	; 0x154 <main+0xc4>
 154:	00 00       	nop
		{
			OCR1A = counter;    
			_delay_ms(7);		
		}
		OCR1A = 0;
		for(counter=0; counter<0xff; counter++) 
 156:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <counter>
 15a:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <counter+0x1>
 15e:	01 96       	adiw	r24, 0x01	; 1
 160:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <counter+0x1>
 164:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <counter>
 168:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <counter>
 16c:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <counter+0x1>
 170:	8f 3f       	cpi	r24, 0xFF	; 255
 172:	91 05       	cpc	r25, r1
 174:	34 f3       	brlt	.-52     	; 0x142 <main+0xb2>
		{
			OCR1B = counter;  
			_delay_ms(7);
		}
		OCR1B = 0;
 176:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
 17a:	10 92 8a 00 	sts	0x008A, r1	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
		for(counter=0; counter<0xff; counter++) 
 17e:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <counter+0x1>
 182:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <counter>
 186:	11 c0       	rjmp	.+34     	; 0x1aa <main+0x11a>
		{
			OCR2A = counter;
 188:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
 18c:	8f e5       	ldi	r24, 0x5F	; 95
 18e:	9d e6       	ldi	r25, 0x6D	; 109
 190:	01 97       	sbiw	r24, 0x01	; 1
 192:	f1 f7       	brne	.-4      	; 0x190 <main+0x100>
 194:	00 c0       	rjmp	.+0      	; 0x196 <main+0x106>
 196:	00 00       	nop
		{
			OCR1B = counter;  
			_delay_ms(7);
		}
		OCR1B = 0;
		for(counter=0; counter<0xff; counter++) 
 198:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <counter>
 19c:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <counter+0x1>
 1a0:	01 96       	adiw	r24, 0x01	; 1
 1a2:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <counter+0x1>
 1a6:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <counter>
 1aa:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <counter>
 1ae:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <counter+0x1>
 1b2:	8f 3f       	cpi	r24, 0xFF	; 255
 1b4:	91 05       	cpc	r25, r1
 1b6:	44 f3       	brlt	.-48     	; 0x188 <main+0xf8>
		{
			OCR2A = counter;
			_delay_ms(7);
		}
		OCR2A = 0;
 1b8:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
 1bc:	86 cf       	rjmp	.-244    	; 0xca <main+0x3a>
	}
	else{
		for(counter=0xff; counter>=0; counter--)  
 1be:	8f ef       	ldi	r24, 0xFF	; 255
 1c0:	90 e0       	ldi	r25, 0x00	; 0
 1c2:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <counter+0x1>
 1c6:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <counter>
 1ca:	13 c0       	rjmp	.+38     	; 0x1f2 <main+0x162>
		{
			OCR1A = counter;      
 1cc:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 1d0:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
 1d4:	8f e5       	ldi	r24, 0x5F	; 95
 1d6:	9d e6       	ldi	r25, 0x6D	; 109
 1d8:	01 97       	sbiw	r24, 0x01	; 1
 1da:	f1 f7       	brne	.-4      	; 0x1d8 <main+0x148>
 1dc:	00 c0       	rjmp	.+0      	; 0x1de <main+0x14e>
 1de:	00 00       	nop
			_delay_ms(7);
		}
		OCR2A = 0;
	}
	else{
		for(counter=0xff; counter>=0; counter--)  
 1e0:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <counter>
 1e4:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <counter+0x1>
 1e8:	01 97       	sbiw	r24, 0x01	; 1
 1ea:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <counter+0x1>
 1ee:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <counter>
 1f2:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <counter>
 1f6:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <counter+0x1>
 1fa:	99 23       	and	r25, r25
 1fc:	3c f7       	brge	.-50     	; 0x1cc <main+0x13c>
		{
			OCR1A = counter;      
			_delay_ms(7);
		}
		OCR1A = 0;
 1fe:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 202:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>

		for(counter=0xff; counter>=0; counter--) 
 206:	8f ef       	ldi	r24, 0xFF	; 255
 208:	90 e0       	ldi	r25, 0x00	; 0
 20a:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <counter+0x1>
 20e:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <counter>
 212:	13 c0       	rjmp	.+38     	; 0x23a <main+0x1aa>
		{
			OCR1B = counter;   
 214:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
 218:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
 21c:	8f e5       	ldi	r24, 0x5F	; 95
 21e:	9d e6       	ldi	r25, 0x6D	; 109
 220:	01 97       	sbiw	r24, 0x01	; 1
 222:	f1 f7       	brne	.-4      	; 0x220 <main+0x190>
 224:	00 c0       	rjmp	.+0      	; 0x226 <main+0x196>
 226:	00 00       	nop
			OCR1A = counter;      
			_delay_ms(7);
		}
		OCR1A = 0;

		for(counter=0xff; counter>=0; counter--) 
 228:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <counter>
 22c:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <counter+0x1>
 230:	01 97       	sbiw	r24, 0x01	; 1
 232:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <counter+0x1>
 236:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <counter>
 23a:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <counter>
 23e:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <counter+0x1>
 242:	99 23       	and	r25, r25
 244:	3c f7       	brge	.-50     	; 0x214 <main+0x184>
		{
			OCR1B = counter;   
			_delay_ms(7);
		}
		OCR1B = 0;		
 246:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
 24a:	10 92 8a 00 	sts	0x008A, r1	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
		for(counter=0xff; counter>=0; counter--)  
 24e:	8f ef       	ldi	r24, 0xFF	; 255
 250:	90 e0       	ldi	r25, 0x00	; 0
 252:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <counter+0x1>
 256:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <counter>
 25a:	11 c0       	rjmp	.+34     	; 0x27e <main+0x1ee>
		{
			OCR2A = counter;  
 25c:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
 260:	8f e5       	ldi	r24, 0x5F	; 95
 262:	9d e6       	ldi	r25, 0x6D	; 109
 264:	01 97       	sbiw	r24, 0x01	; 1
 266:	f1 f7       	brne	.-4      	; 0x264 <main+0x1d4>
 268:	00 c0       	rjmp	.+0      	; 0x26a <main+0x1da>
 26a:	00 00       	nop
		{
			OCR1B = counter;   
			_delay_ms(7);
		}
		OCR1B = 0;		
		for(counter=0xff; counter>=0; counter--)  
 26c:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <counter>
 270:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <counter+0x1>
 274:	01 97       	sbiw	r24, 0x01	; 1
 276:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <counter+0x1>
 27a:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <counter>
 27e:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <counter>
 282:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <counter+0x1>
 286:	99 23       	and	r25, r25
 288:	4c f7       	brge	.-46     	; 0x25c <main+0x1cc>
		{
			OCR2A = counter;  
			_delay_ms(7);
		}
		OCR2A = 0;		
 28a:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
 28e:	1d cf       	rjmp	.-454    	; 0xca <main+0x3a>

00000290 <__vector_1>:
	}
}
}

ISR(INT0_vect) {
 290:	1f 92       	push	r1
 292:	0f 92       	push	r0
 294:	0f b6       	in	r0, 0x3f	; 63
 296:	0f 92       	push	r0
 298:	11 24       	eor	r1, r1
 29a:	2f 93       	push	r18
 29c:	3f 93       	push	r19
 29e:	4f 93       	push	r20
 2a0:	8f 93       	push	r24
 2a2:	9f 93       	push	r25
 2a4:	af 93       	push	r26
 2a6:	bf 93       	push	r27
 2a8:	cf 93       	push	r28
 2aa:	df 93       	push	r29
 2ac:	ef 93       	push	r30
 2ae:	ff 93       	push	r31
	for (int i = 1; i <= 1; i++) {
 2b0:	81 e0       	ldi	r24, 0x01	; 1
 2b2:	90 e0       	ldi	r25, 0x00	; 0
 2b4:	28 c0       	rjmp	.+80     	; 0x306 <__vector_1+0x76>
		OCR1A = 0xff;
 2b6:	c8 e8       	ldi	r28, 0x88	; 136
 2b8:	d0 e0       	ldi	r29, 0x00	; 0
 2ba:	2f ef       	ldi	r18, 0xFF	; 255
 2bc:	30 e0       	ldi	r19, 0x00	; 0
 2be:	39 83       	std	Y+1, r19	; 0x01
 2c0:	28 83       	st	Y, r18
		OCR1B = 0xff;
 2c2:	aa e8       	ldi	r26, 0x8A	; 138
 2c4:	b0 e0       	ldi	r27, 0x00	; 0
 2c6:	11 96       	adiw	r26, 0x01	; 1
 2c8:	3c 93       	st	X, r19
 2ca:	2e 93       	st	-X, r18
		OCR2A = 0xff;
 2cc:	e3 eb       	ldi	r30, 0xB3	; 179
 2ce:	f0 e0       	ldi	r31, 0x00	; 0
 2d0:	2f ef       	ldi	r18, 0xFF	; 255
 2d2:	20 83       	st	Z, r18
 2d4:	2f ef       	ldi	r18, 0xFF	; 255
 2d6:	39 e6       	ldi	r19, 0x69	; 105
 2d8:	48 e1       	ldi	r20, 0x18	; 24
 2da:	21 50       	subi	r18, 0x01	; 1
 2dc:	30 40       	sbci	r19, 0x00	; 0
 2de:	40 40       	sbci	r20, 0x00	; 0
 2e0:	e1 f7       	brne	.-8      	; 0x2da <__vector_1+0x4a>
 2e2:	00 c0       	rjmp	.+0      	; 0x2e4 <__vector_1+0x54>
 2e4:	00 00       	nop
		_delay_ms(500);
		OCR1A = 0x00;
 2e6:	19 82       	std	Y+1, r1	; 0x01
 2e8:	18 82       	st	Y, r1
		OCR1B = 0x00;
 2ea:	11 96       	adiw	r26, 0x01	; 1
 2ec:	1c 92       	st	X, r1
 2ee:	1e 92       	st	-X, r1
		OCR2A = 0x00;
 2f0:	10 82       	st	Z, r1
 2f2:	2f ef       	ldi	r18, 0xFF	; 255
 2f4:	39 e6       	ldi	r19, 0x69	; 105
 2f6:	48 e1       	ldi	r20, 0x18	; 24
 2f8:	21 50       	subi	r18, 0x01	; 1
 2fa:	30 40       	sbci	r19, 0x00	; 0
 2fc:	40 40       	sbci	r20, 0x00	; 0
 2fe:	e1 f7       	brne	.-8      	; 0x2f8 <__vector_1+0x68>
 300:	00 c0       	rjmp	.+0      	; 0x302 <__vector_1+0x72>
 302:	00 00       	nop
	}
}
}

ISR(INT0_vect) {
	for (int i = 1; i <= 1; i++) {
 304:	01 96       	adiw	r24, 0x01	; 1
 306:	82 30       	cpi	r24, 0x02	; 2
 308:	91 05       	cpc	r25, r1
 30a:	ac f2       	brlt	.-86     	; 0x2b6 <__vector_1+0x26>
		OCR1A = 0x00;
		OCR1B = 0x00;
		OCR2A = 0x00;
		_delay_ms(500);
	}
 30c:	ff 91       	pop	r31
 30e:	ef 91       	pop	r30
 310:	df 91       	pop	r29
 312:	cf 91       	pop	r28
 314:	bf 91       	pop	r27
 316:	af 91       	pop	r26
 318:	9f 91       	pop	r25
 31a:	8f 91       	pop	r24
 31c:	4f 91       	pop	r20
 31e:	3f 91       	pop	r19
 320:	2f 91       	pop	r18
 322:	0f 90       	pop	r0
 324:	0f be       	out	0x3f, r0	; 63
 326:	0f 90       	pop	r0
 328:	1f 90       	pop	r1
 32a:	18 95       	reti

0000032c <_exit>:
 32c:	f8 94       	cli

0000032e <__stop_program>:
 32e:	ff cf       	rjmp	.-2      	; 0x32e <__stop_program>
